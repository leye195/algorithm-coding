'''
문제 설명
네트워크를 통해 전파되는 바이러스가 한 컴퓨터에서 발견되었습니다. 바이러스에 감염된 컴퓨터는 1시간 후 해당 컴퓨터와 직접 연결된 모든 컴퓨터를 바이러스에 감염시킵니다. 관리자는 컴퓨터와 컴퓨터 사이의 연결을 하나씩 끊어 바이러스의 확산을 최대한 막으려고 합니다. 하지만 연결 하나를 끊는 작업 또한 1시간이 걸립니다. 단, 컴퓨터가 감염이 되는 것과 동시에 연결이 끊긴다면 해당 컴퓨터는 감염되지 않는다고 가정합니다.
아래 그림은 컴퓨터 간 네트워크 연결을 나타냅니다. 컴퓨터 n대가 있을 때, 모든 컴퓨터는 0부터 n - 1까지 번호를 부여받습니다. 네트워크는 트리 구조이며, 최초 감염은 루트 노드에서 일어납니다. 각 노드는 컴퓨터를 나타내며, 화살표는 두 컴퓨터가 직접 연결되어 있음을 나타냅니다.

매 시간마다 관리자는 아래 그림과 같이 연결을 끊습니다. 빨간 노드는 감염된 노드를 나타내며, 빨간 화살표는 관리자가 끊어버린 연결을 나타냅니다. 처음에 0번과 1번 사이의 연결을 끊고, 이어서 2번과 6번, 8번과 18번 사이의 연결을 끊습니다.

위 그림과 같이 연결을 끊게 되면 총 7대의 컴퓨터가 감염되며, 다른 어떤 방법을 쓰더라도 감염되는 컴퓨터가 7대보다 적을 수 없습니다.
총 컴퓨터의 수 n과 연결된 두 컴퓨터의 번호를 나타내는 2차원 배열 edges가 매개변수로 주어집니다. 감염된 컴퓨터 수를 최소화하도록 연결을 하나씩 끊을 때, 그때의 감염된 컴퓨터 수를 return 하도록 solution 함수를 완성해주세요.

제한사항
n은 2 이상 50 이하의 자연수입니다.
edges의 길이는 항상 n - 1 입니다.
edges 배열의 원소는 [컴퓨터 번호 A, 컴퓨터 번호 B] 형태입니다.
A와 B는 0부터 n - 1 까지 부여된 번호 중 하나입니다.
A는 B의 부모 노드입니다.
최초 감염 노드는 항상 0번 노드입니다.
입출력 예
n	edges	result
19	[[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [3, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [6, 16], [8, 17], [8, 18]]	7
14	[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [3, 9], [3, 10], [4, 11], [4, 12], [4, 13]]	4
10	[[0, 1], [0, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9]]	2
'''

from collections import deque
def solution(n, edges):
    answer,cur = 0,0
    graph,visited=[[]*n for i in range(n)],[0]*n
    for e in edges:
        graph[e[0]].append(e[1])
    #cut line
    q=deque()
    q.append(0)
    visited[0] = 1
    while q:
        #spread virus
        tmp = q.popleft()
        answer+=1
        if len(graph[tmp]) and visited[graph[tmp][0]]==0:
            for i in graph[tmp]:
                if visited[i]==0:
                    graph[tmp].remove(i)
                    break
                    #print(graph[tmp].pop(0))
        for i in graph[tmp]:
            if visited[i]==0:
                q.append(i)
                visited[i]=1
    return answer
