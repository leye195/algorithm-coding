LIS (최장 증가 부분 수열) 알고리즘

원소가 n개인 배열의 일부 원소를 골라 만든 부분 수열 중, 각 원소가 이전 원소보다 큰다는 조건을 만족하고
그 길이가 최대인 부분 수열을 최장 증가 부분 수열일아고 한다.

ex) [6,2,5,1,7,4,8,3] 에서 LIS는 [2,5,7,8] 이 된다.

일반적으로 문제를 해결하는 가장 편한 방법은 DP를 이용하는것이다.

아래 코드에서 dp는 i번째 인덱스에서 끝나는 부분수열의 최장 수열길이를 의미한다.

```
const dp = new Array(n).fill(0);

for(let i=0;i<nums.length;i++) {
    for(let j=0;j<i;j++) {
        if(dp[i]>dp[j]) { 
            dp[i] = Math.max(dp[i],dp[j]+1);
        }
    }
}

return Math.max(...dp);
```

2중 for를 사용하고 있기 때문에 O(n^2) 의 시간 복잡도를 가진다. n이 100일 경우 10초 정도 걸린다고 예상 할 수 있다.

다른 한 가지 방법은 이분 탐색의 lower bounder를 활용하는 것이다.

LIS를 유지하기 위한 최적의 위치를 찾는데 lower bounder를 활용하기 때문에 O(nlgn) 시간복잡도를 가지게 된다.


```
const lowerBound = (arr,lo,hi,target) => {
    while(lo < hi) {
        const mid = Math.floor((lo+hi)/2);

        if(target <= arr[mid]) {
            hi = mid;
        } else {
            lo = mid+1;
        }
    }
    return lo;
}

const arr = [];
const n = nums.length;

for (let i = 0; i < nums.length; i++) {
  const target = nums[i];
  const idx = lowerBound(arr, 0, arr.length, target);

  if (idx >= arr.length) arr.push(target);
  else if (arr[idx] < target) arr[idx] = target;
}
return arr.length;
```

LCS 알고리즘

주로 Longest Common Subsequence를 말하지만 Longest Common Substring을 말하기도 한다.

문자열 ABCDEF와 GBCDFE를 예로 들면 


Longest Common Subsequence

- ABCDEF, GBCDEF -> BCDF
- ABCDEF, GBCDFE -> BCDE 

Longest Common Substring

- ABCDEF, GBCDFE -> BCD


Longest Common Substring에 대해서 먼저 알아보겠다.

- i 혹은 j가 0일때 LCS에 0을 넣어줘 마진값을 생성
- i,j가 1이상일 때 아래 과정을 수행
  > A와 B의 글자를 비교한다
  > 두 문자가 다를 경우 LCS[i][j] 에 0을 대입
  > 두 문자가 같다면 LCS[i-1][j-1] 값을 찾아 +1을 해준다

```
if(i===0 || j===0) {
    LCS[i][j] = 0;
} else if(stringA[i] === stringB[j]) {
    LCS[i][j] = LCS[i-1][j-1] + 1;
} else {
    LCS[i][j] = 0;
}
```

다음으로는 Longest Common Subsequence에 대해 알아보겠다.

- i 혹은 j 0일 때 LCS에 0을 넣어준다
- i,j가 1이상일 때 경우 아래 과정을 수행
  > A와 B가 다르다면 LCS[i][j]에 LCS[i-1][j],LCS[i][j-1] 중 더 큰 값을 넣어준다
  > A와 B가 같을 경우 LCS[i][j]에 LCS[i-1][j-1] + 1 값을 넣어준다

LCS[i-1][j]와 LCS[i][j-1]는 현재 문자열을 비교의 이전 과정을 의미한다.

```
if(i === 0 || j === 0) {
    LCS[i][j] = 0;
} else if(stringA[i] === stringB[j]) {
    LCS[i][j] = LCS[i-1][j-1] + 1;
} else {
    LCS[i][j] = max(LCS[i-1][j],LCS[i][j-1]);
}
```

최장 길이의 경우 LCS[n-1][m-1]을 통해 바로 가져올 수 있지만 배열 값의 경우 아래 과정을 수행해야된다.

- LCS 배열 가장 마지막 값에서 시작
- LCS[i-1][j], LCS[i][j-1] 중 현재 값과 같은 값을 찾는다
  > 같은 값이 있는 경우 해당 값으로 이동
  > 없는 경우 LCS[i-1][j-1]로 이동

```
const result = [];
const LCS = [];

let x = n-1;
let y = m-1;

for(let i=0;i<n;i++) {
    const tmp = [];
    for(let j=0;j<m;j++) {
        tmp.push(0);
    }
    LCS.push(tmp);
}

for(let i=0;i<n;i++) {
    for(let j=0;j<m;j++) {
        if(i==0 || j==0) {
            LCS[i][j] = 0;
        } else if(s1[i] === s2[j]) {
            LCS[i][j] = LCS[i-1][j-1]+1;
        } else {
            LCS[i][j] = LCS[i-1][j] > LCS[i][j-1] ? LCS[i-1][j] : LCS[i][j-1];
        }
    }
}



```