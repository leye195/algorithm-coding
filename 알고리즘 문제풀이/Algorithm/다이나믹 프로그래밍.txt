다이나믹 프로그래밍(dp)
다이나믹 프로그래밍은 동적 계획법이라고도 불린다.

자료구조에서 동적 할당이라는 것은 프로그램이 실행되는 도중에 실행에 필요한 공간(메모리)를 할당하는 것을 의미하지만
다이나믹 프로그래밍에서 다이나믹, 즉 동정은 별의미 없이 사용된 단어다.

dp는 문제가 다음과 같은 조건을 만족할 경우 사용가능하다.
1.최적의 부분 구조(Optimal SubStructure): 큰 문제를 작은 문제로 나눌수 있으며 작은 문제의 답을 모아서 큰 문제를 해결가능
2.중복되는 부분 구조(Overlapping Subproblem): 동일한 작은 문제를 반복적으로 해결해야 된다.

피보나치 수열의 경우 dp와 재귀함수로 값을 계산해줄수 있는데
단순 재귀함수로 해결을 할 경우 지수 시간 복잡도를 가지게 된다. 
- O(2^n)의 시간 복잡도를 가진다.

dp를 활용할 경우
- 메모이제이션 기법(한 번 계산한 결과를 메모리 공간에 메모하는 기법)을 활용하게 되는데, 이 기법은 같은 문제를 다시 호출하면 저장했던 결과 값을 그대로 가져온다.
  값을 기록하는 점에서 캐싱이라고도 합니다.

- 탑다운(하향식)과 보텀업(상향식) 2가지 방식이 있는데. dp는 전형적인 상향식 방식입니다.
- 메모이제이션은 이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념을 의미하며 dp에 국한된 개념이 아니다.
  한 번 계산된 결과를 담아놓기만 하고 dp를 위해 활용하지 않을 수도 있다.

ex)
bottom-up(상향식)
dp=[0]*100
dp[1],dp[2]=1,1
for i in range(3,100):
    dp[i]=dp[i-1]+dp[i-2]
print(dp[n])

top-down(하향식)
dp=[0]*100
def fibo(n):
    if n==1 or n==2:
        return 1
    if dp[n]!=0:
        return dp[n]
    dp[n] = fibo(n-1)+fibo(n-2)
    return dp[n]
fibo(99)