정렬

선택 정렬 O(n2)
-처리 되지 않은 data 중 가장 작은 값을 선택해 가장 값의 값과 바꿔준다.
arr=[2,1,5,7,0,3,6,4]
for i in range(len(arr)):
    min_idx = i
    for j in range(i+1,len(arr)):
        if arr[min_idx]>arr[j]:
            min_idx = j
    arr[min_idx],arr[i]=arr[min_idx],arr[i]

삽입 정렬 O(n2)
-처리되지 않은 data를 하나씩 골라 적절한 위치에 삽입해준다, 현재 리스트의 데이터가 거의 정렬되어 있는 경우,
매우 빠르게 동작한다. 즉, 최선의 경우 O(n)
-선택 정렬보다 더 효율적
arr=[2,1,5,7,0,3,6,4]
for i in range(1,len(arr)):
    for j in range(i,0,-1):
        if arr[j]<arr[j-1]: //왼쪽이 자기보다 크면 위치 swap
            arr[j],arr[j-1] = arr[j-1],arr[j]
        else:
            break

퀵정렬: 평균 O(nlgN) 이며, 최악의 경우 O(n2)의 복잡도를 가지며 이미 정렬이된 배열에 대해서는 매우 느리게 동작한다. 
-기준 데이터를 정하고, 그 기준보다 큰 데이터와 작은 데이터의 위치를 바꿔주며 
위치가 얻갈린 경우 기준 데이터와 작은 데이터의 위치를 서로 변경해준다.
-가장 많이 사용되는 정렬 방법 중 하나로 병합 정렬과 더불어 대부분 언어의 정렬 lib의 근간이 됨
-가장 기본적으로 첫번째 데이터 혹은 마지막 데이토를 기준 데이터 pivot으로 설정해준다.

arr=[2,1,5,7,0,3,6,4]
def quick_sort(arr,start,end):
    if start>=end:
        return
    pivot = start
    le,ri = start+1,end
    while le<=ri:
        while(le<=end and arr[le]<=arr[pivot]):
            le+=1
        while(ri>start and arr[ri]>=arr[pivot]):
            ri-=1
        if(le>ri):
            arr[le],arr[pivot] = arr[pivot],arr[le]
        else:
            arr[le],arr[ri] = arr[ri],arr[le]
    quick_sort(arr,st,ri-1)
    quick_sort(arr,ri+1,end)
quick_sort(arr,0,len(arr)-1)


- python 장점을 살린 방식
def quick_sort(arr):
    if len(arr)<=1:
        return arr
    pivot = arr[0]
    tail = arr[1:] //기준 값 제외 리스트
    left_side = [x for x in tail if x<=pivot] #왼쪽 부분
    right_side = [x for x in tail if x>pivot] #오른쪽 부분
    return quick_sort(left_side)+[pivot]+quick_sort(right_side)

탐색

순차탐색: 리스트 안에 특정 데이터를 찾기 위해 앞에서 부터 하나 씩 확인하는법
이진탐색: 정렬되어 있는 리스트에서 탐색 범위를 절반식 좁혀가며 데이터를 탐색하는 법

이진탐색은 단계마다 탐색범위를 2로 나누는것과 동일해 연산횟수사 logN에 비례한다. O(logN) 

- 값이 특정 범위에 속하는 데이터 개수 구하기
from bisect import bisect_left,bisect_right
def count_by_range(arr,left_value,right_value):
    left_idx,right_idx = bisect_left(arr,left_value),bisect_right(arr,right_value)
    return right_idx - left_idx
- parametric search: 최적화 문제를 결정 문제로 바꾸러 해결하는 기법으로
특정한 조건을 만족하는 가장 알맞은 값을 빠르게 찾는 최적화 문제를 예로 들수 있다.
  일반적으로 이진 탐색을 이용해 해결가능