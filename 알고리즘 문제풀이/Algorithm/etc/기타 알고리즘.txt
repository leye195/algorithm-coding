기타 알고리즘

- 위상 정렬 (Topology Sort)
사이클이 없는 방향 그래프의 모든 노드를 방향성에 거스리지 않도록 순서대로 나열하는 것
ex) 선수과목을 고려한 학습 순서

--진입차수(indegree):특정 노드로 들어로는 간선 개수 
--진출차수(outdegree):특정 노드에서 나가는 간선 개수
ex)
1 ----> 2
|       |
|--->3<-| 
1의 indegree:0, outdegree:2
2의 indegree:1, outdegree:1
3의 indegree:2, outdegree:0

과정:
큐를 활용하는 위상정렬 알고리즘의 동작은 다음과 같다
1. 진입차수가 0인 모든 노드를 큐에 삽입
2. 큐가 빌 때까지 다은 과정 반복
--1.큐에서 원소를 꺼내 해당 노드에서 나가는 간선을 그래프에서 제거
--2.새롭게 진입차수가 0이 된 노드를 큐에 삽입

*순환하지 않는 방향 그래프에 대해서만 수행가능혀마
*여러가지 답이 존재 할 수 있다.
-->한 단계에서 큐에 들어가는 원소가 2개 이상일 경우 여러가지 답 존재가능
-->모든 원소를 방문하기 전에

```
def topology_sort(graph):
    q=deque()
    result = []
    indegree= [0]*len(graph)
    for i in range(len(graph)):
        for j in range(len(graph)):
            if graph[i][j]:
                indegree[j]+=1

    for i in len(indegree):
        if indegree[i]==0:
            q.append(i)
    while q:
        now = q.popleft()
        result.append(now)
        for i in len(graph[now]):
            if graph[now][i] and indegree[i]>0:
                indegree[i]-=1
                if indegree[i]==0:
                    q.append(i)
    for i in result:
        print(i,end=' ')
```

- 소수 판별
*소수는 2보다 큰 자연수 중 1과 본인을 제외한 자연수로 나누어떨어지지 않는 자연수

모든 약수들이 가운데 약수를 기준으로 곱셈 연산에 대해서 대칭을 이루고 있기에
특정한 자연수의 모든 약수를 찾을때 가운데 약수(제곱근)까지만 확인해주면 됨

기본구현 방법은 2 ~ x-1 까지 모든 자연수에 대해 연산을 수행하기 때문에 O(x) 시간복잡도를 가진다
시간 복잡도가 선형적으로 증가
```
const isPrime = (x) => {
    for(let i=2;i<x;i++) {
        if(x%i===0) return false;
    }
    return true;
}
```

모든 약수가 가운데 약수를 기준으로 곱셈 연산에 대해 대칭을 이루고 있음 
- 16의 경우 약수는 1,2,[4],8,16 
  - 2*8은 8*2과 대칭한다.
- 특정 자연수의 모든 약수를 찾을 때 가운데 약수(제곱근)까지만 확인 하면된다. O(N^1/2)

```
// python
import math
def is_prime(x):
    # 2부터 x의 제곱근 까지 모든 수를 체크
    for i in range(2,int(math.sqrt(x))+1):
        if x%i == 0: #x가 해단 수로 나누어 떨어진다면 소수가 아님
            return False
    return True

// js
const isPrime = (x) => {
    for(let i=2;i<Math.floor(Math.sqrt(x))+1;i++) {
        if(x%2===0) return false;
    }
    return true;
}

```

- 에라토스테네스의 체 O(nlgnlg)
*다수의 소수 판별, 특정 수 범위 안에 존재하는 모든 소수를 찾아야 할 경우 사용

과정:
1. 2~n 까지 모든 자연수 나열
2. 남은 수 중에서 아직 처리되지 않은 가장 작은 수 i를 찾는다
3. 남은 수 중에서 i의 배수를 모두 제거 (i 제외)
4. 더 이상 반복할 수 없을 때 까지 2번 3번 반복  
```
import math
def get_primes(n): 
    arr=[1 for i in range(n+1)]
    for i in range(2,int(math.sqrt(n))+1):
        if arr[i]:
            j=2
            while i*j<=n:
                arr[i*j] = 0
                j+=1

const getPrimes = (n) => {
    const arr = new Array(n+1).fill(1);
    for(let i=2;i<Math.floor(Math.sqrt(n))+1;i++) {
        if(arr[i]) {
            let j = 2;

            while(i*j<=n) {
                arr[i*j] = 0;
                j++;
            }
        }
    }
}
```
*다수의 소수를 찾는 문제에서는 효과적으로 사용가능 하지만 각 자연수에 대한 소수 판별 여부를 저장해야해
메모리가 많이 필요함
*10억이 소수인지 판별해야 되는 경우 활용 하기 어렵고 그냥 소수 판별을 해주는게 좋음



비트마스크 (BitMask)

BitMask 사용 이유
- dp, 순열 등, 배열 활용 만으로 해결할 수 없는 문제
- 작은 메모리와 빠른 수행시간으로 해결 가능 (원소의 수가 많지 않아야된다)
- 집합을 배열의 인덱스로 표현 할 수 있듬
- 코드가 간결해짐


[1,2,3,4,5] 라는 집합이 있다고 가정하고 임의로 몇개를 골라서 뽑아 확인해야 되는 경우 (부분 집합을 의미)
for 문을 돌려서 배열에 저장하며 경우의 수를 구할 수 있지만 BitMask를 활용하면 각 요소를 인덱스로 표현하여 효율적으로 접근이 가능해진다.

[1,2,3,4,5] -> 11111
[2,3,4,5] -> 11110
[1,2,5] -> 10011
[2] -> 00010

집합의 i번쨰 요소에 존재하면 1, 아닌 경우를 0으로 표시

비트 연산
- AND(&): 대응하는 두 비트가 모두 1일 때, 1 반환
- OR(|): 대응하는 두 비트 중 모두 1이거나 하나가 1일때 1 반환
- XOR(^): 대응하는 두 비트가 서로 다를 경우 1 반환
- NOT(~): 비트 값 반전하여 반환
- SHIFT(>>,<<): 왼쪽 혹은 오른쪽으로 비트를 옮겨 반환
  > 왼쪽 시프트: A * 2^B 
  > 오른쪽 시프트: A / 2^B

[왼쪽] 0001 -> 0010 -> 0100 -> 1000
[오른쪽] 1000 -> 0100 -> 0010 -> 0001

1.삽입
이진수로 10101 로 표현되고 있을 때, i번쨰 비트값을 1로 변경하려고 한다.
i=3 일 때 변경 후에는 11101이 나와야하기 때문에 OR 연산자를 사용해야한다.

10101 | 1 << 3 -> 10101 | 01000 -> 11101

2.삭제
반대로 0으로 변경하려고 할 경우 AND와 NOT 연산을 활용한다.

11101 & ~1 << 3 -> 11101 & 10111 -> 10101

3.조회
i번째 비트가 무슨값인지 알려면 AND 연산을 활용한다

10101 & 1 << i

3번째 비트 값: 10101 & 1 << 3 -> 10101 & 01000 -> 00000
4번째 비트 값: 10101 & 1 << 4 -> 10101 & 10000 -> 10000

1 ~ n ~ 1

0 10 15 20
5  0  9 10
6 13  0 12
8  8  9  0

1111

```
// 외판원순회 문제

const backtrack = (count,cur,visited,arr,total) => {
    if(visited === (1 << arr.length) - 1) {
        ans = Math.min(total,ans);
        return;
    }

    if(count > n) {
        return;
    }

    for(let i=0;i<arr[cur].length;i++) {
         if((visited & 1 <<(i+1))===0 && arr[cur][i]) {
            visited = visited | 1 << (i+1);
            backtrack(i,visited,arr,total+arr[cur][i]);
            visited = visited & ~1 << (i+1);
         }
    }
}

let ans = Infinity;
let visited = 0;


for(let i=0;i<n;i++) {
  let cur = i;

  if((visited & 1 <<(cur+1))===0) {
    visited = visited | 1 << (cur+1);
    backtrack(0,cur,visited,arr,0,0);
    visited = visited & ~1 << (cur+1);
  }
}

return ans;
```

